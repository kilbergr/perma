version: '2'

services:
  #
  # Perma
  #
  # TO USE REDIS FOR CACHING:
  # Add the caches setting found in settings_prod to your settings.py,
  # with "LOCATION": "redis://perma-redis:6379/0"
  # (Don't clobber the Celery backend, which is at /1)
  perma-redis:
    image: registry.lil.tools/library/redis:4.0.6
    volumes:
      - redis_data:/data:delegated
  db:
    image: registry.lil.tools/library/postgres:12.8
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: perma
      POSTGRES_USER: perma
    volumes:
      - postgres_data:/var/lib/postgresql/data:delegated
    networks:
      - default
  web:
    image: registry.lil.tools/harvardlil/perma-web:26-cb7a270eedc83fc304e684cfdbba0cbe
    tty: true
    command: bash
    # TO AUTOMATICALLY START PERMA:
    # (sleep hack to give the database and rabbitmq time to start up)
    # command: >
    #   sh -c "sleep 10 && ./manage.py migrate && fab run"
    volumes:
      # NAMED VOLUMES
      # Use a named, persistent volume so that the node_modules directory,
      # which is created during the image's build process, and which our
      # code presently expects to be nested inside the perma_web directory,
      # isn't wiped out when mounting our code in ./perma_web code to
      # the container. We can consider restructuring the project instead.
      - node_modules:/perma/perma_web/node_modules
      # BIND MOUNTS
      - ./perma_web:/perma/perma_web
      - ./services/celery:/perma/services/celery
      - ./services/cloudflare:/perma/services/cloudflare
      - ./services/django:/perma/services/django:delegated
      - ./services/logs:/perma/services/logs:delegated
      - ./services/docker/minio/ssl:/tmp/minio_ssl
    # give chrome lots of space for making big screenshots
    # https://github.com/elgalu/docker-selenium/issues/20
    shm_size: 2G
    environment:
      - DOCKERIZED=True
      - DJANGO_LIVE_TEST_SERVER_ADDRESS=0.0.0.0:8000
    extra_hosts:
      - "perma.test:127.0.0.1"
      - "api.perma.test:127.0.0.1"
      - "replay.perma.test:127.0.0.1"
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      - db
    networks:
      default:
        aliases:
          - 'perma.test'
          - 'api.perma.test'
          - 'replay.perma.test'
      perma_payments:
      webrecorder:

  #
  # Minio
  #
  minio:
    image: minio/minio:RELEASE.2022-05-03T20-36-08Z
    entrypoint:
      - "/entrypoint.sh"
    command:
      - "server"
      - "--address"
      - ":9000"
      - "--console-address"
      - ":9001"
      - " --certs-dir"
      - "/ssl"
      - "/data"
    environment:
      - MINIO_SERVER_URL=https://perma.minio.test:9000
      # synonym for old MINIO_ACCESS_KEY
      - MINIO_ROOT_USER=accesskey
      # synonym for old MINIO_SECRET_KEY
      - MINIO_ROOT_PASSWORD=secretkey
      - DATA_DIR=/data
      - BUCKET=perma-storage
      - MINIO_API_CORS_ALLOW_ORIGIN=https://replay.perma.test:8000
    volumes:
      - ./services/docker/minio/entrypoint.sh:/entrypoint.sh
      - ./services/docker/minio/ssl:/ssl
      - minio_data:/data:delegated
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    extra_hosts:
      - "perma.minio.test:127.0.0.1"
    networks:
      default:
        aliases:
          - 'perma.minio.test'

  #
  # Upload scanning
  #
  filecheck:
    image: registry.lil.tools/harvardlil/perma-filecheck:0.92
    environment:
      - UVICORN_PORT=8888
    ports:
      - "127.0.0.1:8888:8888"
    networks:
      - default

  #
  # Webrecorder
  #
  app:
    image: registry.lil.tools/harvardlil/webrecorder:0.12
    command: uwsgi --need-app /code/apps/apiapp.ini
    env_file:
      - ./services/docker/webrecorder/wr.env
    environment:
      - REFUSE_PLAYBACK=${REFUSE_PLAYBACK}
    depends_on:
      - warcserver
      - recorder
      - redis
    volumes:
      - wr_warcs:/data/warcs:ro
      - ./services/docker/webrecorder/wr-custom.yaml:/code/webrecorder/config/wr-custom.yaml:ro
      - ./services/docker/webrecorder/contentcontroller.py:/code/webrecorder/contentcontroller.py:ro
      # Temporary patches for webrecorder
      - ./services/docker/webrecorder/maincontroller.py:/code/webrecorder/maincontroller.py:ro
      - ./services/docker/webrecorder/importer.py:/code/webrecorder/models/importer.py:ro
    networks:
      - webrecorder

  recorder:
    image: registry.lil.tools/harvardlil/webrecorder:0.12
    user: root
    entrypoint:
      - "/docker-entrypoint.sh"
    command:
      - "uwsgi"
      - "--need-app"
      - "/code/apps/rec.ini"
    environment:
      - WR_DEBUG=False
    env_file:
      - ./services/docker/webrecorder/wr.env
    depends_on:
      - warcserver
      - redis
    volumes:
      - wr_warcs:/data/warcs
      - ./services/docker/webrecorder/wr-custom.yaml:/code/webrecorder/config/wr-custom.yaml:ro
      - ./services/docker/webrecorder/docker-entrypoint.sh:/docker-entrypoint.sh:ro
      # Temporary patches for webrecorder
      # https://github.com/webrecorder/webrecorder/pull/716
      - ./services/docker/webrecorder/recorder_main.py:/code/webrecorder/rec/main.py:ro
      - ./services/docker/webrecorder/tempchecker.py:/code/webrecorder/rec/tempchecker.py:ro
      - ./services/docker/webrecorder/local.py:/code/webrecorder/rec/storage/local.py:ro
      - ./services/docker/webrecorder/collection.py:/code/webrecorder/models/collection.py:ro
      # fixes a bug on prod, where sometimes the user is removed from redis before the storage committer code runs
      - ./services/docker/webrecorder/recording.py:/code/webrecorder/models/recording.py:ro
    networks:
      - webrecorder

  warcserver:
    image: registry.lil.tools/harvardlil/webrecorder:0.12
    command: uwsgi --need-app /code/apps/load.ini
    env_file:
      - ./services/docker/webrecorder/wr.env
    depends_on:
      - redis
    volumes:
      - wr_warcs:/data/warcs
      - ./services/docker/webrecorder/wr-custom.yaml:/code/webrecorder/config/wr-custom.yaml:ro
    networks:
      - webrecorder

  nginx:
    image: registry.lil.tools/harvardlil/nginx:0.03
    depends_on:
      - app
    volumes:
      - wr_warcs:/data/warcs:ro
      - ./services/docker/webrecorder/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/docker/webrecorder/nginx/webrec.conf:/etc/nginx/webrec.conf:ro
      # SSL certs generated by init.sh. See developer.md for details
      - ./services/docker/webrecorder/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      # The WR API. See perma_web/perma/settings/settings_common "WR_API"
      # for a description of when to expose this port
      # - "127.0.0.1:8089:80"
      # WR "content"/playback
      - "127.0.0.1:8092:8443"
    extra_hosts:
      - "perma-archives.test:127.0.0.1"
    networks:
      default:
        aliases:
          - 'perma-archives.test'
      webrecorder:

  redis:
    image: registry.lil.tools/library/redis:4.0.6
    env_file:
      - ./services/docker/webrecorder/wr.env
    volumes:
      - wr_redis_data:/data:delegated
    networks:
      - webrecorder

volumes:
  node_modules:
  postgres_data:
  redis_data:
  pp_db_data:
  wr_warcs:
  wr_redis_data:
  minio_data:

networks:
  default:
  perma_payments:
      name: perma-payments_default

  # TO CONNECT TO A SEPARATELY-RUNNING WEBRECORDER INSTANCE
  # instead of spinning one up here from our pre-built image
  # --------------------------------------------------------
  # 1) start the WR containers first, via WR's own repo and docker-compose file
  # 2) comment out the Webecorder service and all its associated containers above
  # 3) uncomment the "external" stanza below,
  # 4) finally, start Perma's containers
  #
  # (recommended for simultaneous Perma and Webrecorder development)
  webrecorder:
  #   name: webrecorder_default
